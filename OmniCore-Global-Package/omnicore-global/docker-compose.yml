version: '3.8'

services:
  # Main OmniCore Backend
  omnicore-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://omnicore:omnicore123@postgres:5432/omnicore_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=your-super-secret-key-change-in-production
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - omnicore-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx serving static files)
  omnicore-frontend:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - omnicore-backend
    networks:
      - omnicore-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=omnicore_db
      - POSTGRES_USER=omnicore
      - POSTGRES_PASSWORD=omnicore123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - omnicore-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omnicore -d omnicore_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - omnicore-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass omnicore123
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A backend.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://omnicore:omnicore123@postgres:5432/omnicore_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - omnicore-network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://omnicore:omnicore123@postgres:5432/omnicore_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - omnicore-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - omnicore-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=omnicore123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - omnicore-network
    restart: unless-stopped

  # Log Management - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - omnicore-network
    restart: unless-stopped

  # Message Queue - RabbitMQ (Alternative to Redis)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=omnicore
      - RABBITMQ_DEFAULT_PASS=omnicore123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - omnicore-network
    restart: unless-stopped

  # Load Balancer - HAProxy (for multiple backend instances)
  haproxy:
    image: haproxy:2.8-alpine
    ports:
      - "8080:8080"
      - "8404:8404"  # Stats page
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - omnicore-backend
    networks:
      - omnicore-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      - PGPASSWORD=omnicore123
    volumes:
      - ./backups:/backups
      - ./backup-script.sh:/backup-script.sh
    command: /bin/sh -c "chmod +x /backup-script.sh && crond -f"
    depends_on:
      - postgres
    networks:
      - omnicore-network
    restart: unless-stopped

# Multi-tenant scaling (uncomment for production)
  # omnicore-backend-2:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8001:8000"
  #   environment:
  #     - DATABASE_URL=postgresql://omnicore:omnicore123@postgres:5432/omnicore_db
  #     - REDIS_URL=redis://redis:6379/0
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - omnicore-network

  # omnicore-backend-3:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8002:8000"
  #   environment:
  #     - DATABASE_URL=postgresql://omnicore:omnicore123@postgres:5432/omnicore_db
  #     - REDIS_URL=redis://redis:6379/0
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - omnicore-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  omnicore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health checks and dependencies
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s