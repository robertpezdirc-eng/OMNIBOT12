# üöÄ OMNI-BRAIN-MAXI-ULTRA Production Docker Compose
# Napredna containerizirana re≈°itev z monitoring, backup in security

version: '3.8'

services:
  # üß† Glavni OMNI-BRAIN aplikacijski container
  omni-brain-production:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: omni-brain-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - WEBSOCKET_PORT=3001
      - MONGODB_URI=mongodb://omni:${MONGO_PASSWORD}@mongo-prod:27017/omni-brain?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-prod:6379
      - LOG_LEVEL=info
      - ENABLE_ANALYTICS=true
      - ENABLE_BACKUP=true
      - ENABLE_MONITORING=true
      - ENABLE_SSL=true
      - ENABLE_OMNI_BRAIN=true
      - OMNI_BRAIN_ENABLED=true
      - OMNI_BRAIN_AUTO_SAVE=true
      - OMNI_BRAIN_SAVE_INTERVAL=300000
      - OMNI_BRAIN_LEARNING_AGENT=true
      - OMNI_BRAIN_COMMERCIAL_AGENT=true
      - OMNI_BRAIN_OPTIMIZATION_AGENT=true
      - OMNI_BRAIN_REAL_TIME_MONITORING=true
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - ./data:/app/data
      - ./certs:/app/certs
    depends_on:
      - mongo-prod
      - redis-prod
    networks:
      - omni-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # üóÑÔ∏è MongoDB production database
  mongo-prod:
    image: mongo:6.0
    container_name: omni-mongo-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=omni
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=omni-brain
    volumes:
      - mongo-prod-data:/data/db
      - mongo-prod-config:/data/configdb
      - ./mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./logs/mongo:/var/log/mongodb
    networks:
      - omni-prod-network
    command: mongod --auth --bind_ip_all --replSet rs0
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # üî¥ Redis production cache
  redis-prod:
    image: redis:7-alpine
    container_name: omni-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-prod-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - omni-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # üåê Nginx production reverse proxy
  nginx-prod:
    image: nginx:alpine
    container_name: omni-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-prod:/etc/nginx/sites-enabled:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/webroot:/var/www/certbot:ro
    depends_on:
      - omni-brain-production
    networks:
      - omni-prod-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Prometheus monitoring
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: omni-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-prod-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - omni-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # üìà Grafana production dashboard
  grafana-prod:
    image: grafana/grafana:latest
    container_name: omni-grafana-prod
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-prod-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards-prod:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources-prod:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus-prod
    networks:
      - omni-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # üîç Elasticsearch za log analizo
  elasticsearch-prod:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: omni-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-prod-data:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
    networks:
      - omni-prod-network
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD} -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'

  # üìã Kibana production
  kibana-prod:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: omni-kibana-prod
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-prod:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - SERVER_NAME=kibana-prod
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch-prod
    networks:
      - omni-prod-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.25'

  # üíæ Automated backup service
  backup-prod:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: omni-backup-prod
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://omni:${MONGO_PASSWORD}@mongo-prod:27017/omni-brain?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-prod:6379
      - BACKUP_SCHEDULE=0 2 * * *  # Vsak dan ob 2:00
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - ./backups:/app/backups
      - ./data:/app/data:ro
      - ./logs/backup:/app/logs
    depends_on:
      - mongo-prod
      - redis-prod
    networks:
      - omni-prod-network

  # üîí SSL Certificate Manager
  certbot-prod:
    image: certbot/certbot
    container_name: omni-certbot-prod
    restart: "no"
    volumes:
      - ./certs:/etc/letsencrypt
      - ./nginx/webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN}
    depends_on:
      - nginx-prod

  # üéØ Node Exporter za system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: omni-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - omni-prod-network

  # üö® Alertmanager za notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: omni-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - omni-prod-network

  # üîÑ Watchtower za auto-updates
  watchtower:
    image: containrrr/watchtower
    container_name: omni-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600  # 1 ura
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${ADMIN_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${ADMIN_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}
    command: --interval 3600 --cleanup

# üåê Production Networks
networks:
  omni-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
    driver_opts:
      com.docker.network.bridge.name: omni-prod-br0

# üíæ Production Volumes
volumes:
  mongo-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/omni-brain/data/mongo
  mongo-prod-config:
    driver: local
  redis-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/omni-brain/data/redis
  prometheus-prod-data:
    driver: local
  grafana-prod-data:
    driver: local
  elasticsearch-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/omni-brain/data/elasticsearch
  alertmanager-data:
    driver: local

# üîß Extension fields
x-logging: &prod-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "5"

x-deploy: &prod-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s